/*
 * Copyright 2017 Regents of the University of California.
 *
 * Licensed under the Educational Community License, Version 2.0 (the "license");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the license at
 *
 * https://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.opentestsystem.ap.apigateway.security;

import lombok.extern.slf4j.Slf4j;
import org.opentestsystem.ap.common.model.admin.AuthenticatedUserModel;
import org.opentestsystem.ap.common.security.model.UserBuilder;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;

import java.util.Collection;
import java.util.Collections;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.lowerCase;

@Slf4j
@Service
public class TimsUserDetailsService implements UserDetailsService {

    private static final String ROLE_ADMIN = "ROLE_ADMIN";

    private static final String ROLE_USER = "ROLE_USER";

    private final PermissionService permissionService;

    public TimsUserDetailsService(PermissionService permissionService) {
        this.permissionService = permissionService;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // catch client exception so we can ignore it, any other error is thrown resulting in a 500 error
        AuthenticatedUserModel authenticatedUser = null;
        try {
            authenticatedUser = permissionService.findAuthenticatedUser(username);
        } catch (HttpClientErrorException e) {
            log.error(
                format("Client error returned by the permission service.  Access denied for username %s", username));
        }

        // initialize with an empty list, the user has nothing granted
        Collection<GrantedAuthority> grantedAuthorities = Collections.emptyList();

        if (authenticatedUser != null) {
            if (authenticatedUser.can().accessTims()) {
                grantedAuthorities = AuthorityUtils.createAuthorityList(ROLE_USER);
            }
            return UserBuilder.builder()
                .model(authenticatedUser)
                .id(authenticatedUser.getId().toString())
                .username(lowerCase(authenticatedUser.getEmail()))
                .email(lowerCase(authenticatedUser.getEmail()))
                .firstName(authenticatedUser.getGivenName())
                .lastName(authenticatedUser.getSurname())
                .fullName(authenticatedUser.getGivenName() + " " + authenticatedUser.getSurname())
                .password("[PROTECTED]")
                .enabled(true)
                .credentialsNonExpired(true)
                .accountNonExpired(true)
                .accountNonLocked(true)
                .authorities(grantedAuthorities)
                .build();
        }

        // Return a user that has no permissions, this results in Access Denied once the SAML flow completes
        // and requests into the app start, we are here because the permission service threw client exception
        return UserBuilder.builder()
            .username(lowerCase(username))
            .password("[PROTECTED]")
            .enabled(false)
            .credentialsNonExpired(false)
            .accountNonExpired(false)
            .accountNonLocked(false)
            .authorities(grantedAuthorities)
            .build();
    }
}
