package org.opentestsystem.ap.apigateway;

import com.okta.jwt.AccessTokenVerifier;
import com.okta.jwt.JwtVerifiers;
import org.opentestsystem.ap.apigateway.filter.JwtZuulFilter;
import org.opentestsystem.ap.common.config.ItemBankProperties;
import org.opentestsystem.ap.common.config.JwtSecurityConfiguration;
import org.opentestsystem.ap.common.config.ObjectMapperConfiguration;
import org.opentestsystem.ap.common.security.authentication.PermissionServiceClient;
import org.opentestsystem.ap.common.security.authentication.TimsUserDetailsService;
import org.opentestsystem.ap.common.security.jwt.JwtService;
import org.opentestsystem.ap.common.security.jwt.JwtSettings;
import org.opentestsystem.rdw.common.status.StatusConfiguration;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;
import org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter;
import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Import({
    JwtSecurityConfiguration.class,
    ObjectMapperConfiguration.class,
    StatusConfiguration.class
})
@Configuration
@EnableZuulProxy
@EnableResourceServer
@EnableConfigurationProperties({ApiGatewayProperties.class, ItemBankProperties.class})
public class ApiGatewayConfiguration extends WebSecurityConfigurerAdapter {

    private static final String OKTA_TOKEN_PROVIDER = "okta";

    private final ApiGatewayProperties apiGatewayProperties;

    private final ItemBankProperties itemBankProperties;

    private final RestTemplateBuilder restTemplateBuilder;

    private final JwtSettings settings;

    public ApiGatewayConfiguration(ApiGatewayProperties apiGatewayProperties,
                                   ItemBankProperties itemBankProperties,
                                   RestTemplateBuilder restTemplateBuilder,
                                   JwtSettings settings) {
        this.apiGatewayProperties = apiGatewayProperties;
        this.itemBankProperties = itemBankProperties;
        this.restTemplateBuilder = restTemplateBuilder;
        this.settings = settings;
    }

    @Bean
    public JwtZuulFilter jwtZuulFilter(final JwtService service) {
        return new JwtZuulFilter(service);
    }


    /**
     * Prior to creating this bean the default RestTemplate was failing when converting a JSON response.  Fixing
     * the error was done by adding the Jackson message converter.
     *
     * @return The rest template
     */
    @Bean
    public RestTemplate restTemplate() {
        List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();

        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
        converter.setSupportedMediaTypes(Collections.singletonList(MediaType.ALL));

        messageConverters.add(converter);

        final RestTemplate restTemplate = new RestTemplate();
        restTemplate.setMessageConverters(messageConverters);
        return restTemplate;
    }

    @Bean
    public ResourceServerConfigurer resourceServerConfigurer(ResourceServerTokenServices tokenServices) {
        return new ResourceServerConfigurer() {
            @Override
            public void configure(final ResourceServerSecurityConfigurer config) {
                config.tokenServices(tokenServices);
            }

            @Override
            public void configure(final HttpSecurity http) throws Exception {
                http
                    .authorizeRequests()
                        .antMatchers("/manage/health**", "/manage/info")
                            .permitAll();
                http
                    .authorizeRequests()
                        .antMatchers("/api/**")
                            .authenticated();
                http
                    .exceptionHandling()
                        .accessDeniedHandler(new OAuth2AccessDeniedHandler());
            }
        };
    }

    @Bean
    public PermissionServiceClient permissionServiceClient() {
        return new PermissionServiceClient(
            this.restTemplateBuilder,
            this.itemBankProperties.getServices().getPermission()
        );
    }

    @Bean
    public TimsUserDetailsService timsUserDetailsService() {
        return new TimsUserDetailsService(permissionServiceClient());
    }

    @Bean
    public ResourceServerTokenServices tokenServices() {
        // Temporarily support both OpenAM and Okta based on configuration.
        return OKTA_TOKEN_PROVIDER.equalsIgnoreCase(apiGatewayProperties.getTokenProvider())
            ? oktaTokenServices()
            : openAmTokenServices();
    }

    private OpenAmTokenServices openAmTokenServices() {
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.setErrorHandler(new DefaultResponseErrorHandler() {
            @Override
            // Ignore 400, that is what is returned if the token is invalid
            // Better to pass back the json body to make the error message available
            public void handleError(ClientHttpResponse response) throws IOException {
                if (response.getRawStatusCode() != 400) {
                    super.handleError(response);
                }
            }
        });

        // this converter ultimately sets the OAuth2Authentication.userAuthentication with
        // an instance of type UsernamePasswordAuthenticationToken
        DefaultUserAuthenticationConverter authenticationConverter = new DefaultUserAuthenticationConverter();
        authenticationConverter.setUserDetailsService(timsUserDetailsService());

        DefaultAccessTokenConverter tokenConverter = new DefaultAccessTokenConverter();
        tokenConverter.setIncludeGrantType(true);
        tokenConverter.setUserTokenConverter(authenticationConverter);

        return new OpenAmTokenServices(this.apiGatewayProperties, tokenConverter, restTemplate);
    }

    private OktaTokenServices oktaTokenServices() {
        final AccessTokenVerifier verifier = oktaJwtVerifier();
        DefaultAccessTokenConverter tokenConverter = new DefaultAccessTokenConverter();
        tokenConverter.setIncludeGrantType(true);

        return new OktaTokenServices(tokenConverter, verifier);
    }

    private AccessTokenVerifier oktaJwtVerifier() {
        return JwtVerifiers.accessTokenVerifierBuilder()
                .setIssuer(apiGatewayProperties.getCheckTokenEndpointUrl())
                .setAudience(apiGatewayProperties.getAudience())
                .setConnectionTimeout(Duration.ofMillis(apiGatewayProperties.getConnectionTimeout()))
                .setReadTimeout(Duration.ofMillis(apiGatewayProperties.getConnectionTimeout()))
                .build();
    }}