package org.opentestsystem.ap.apigateway;

import com.okta.jwt.AccessTokenVerifier;
import com.okta.jwt.JwtVerifiers;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;
import org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.time.Duration;

@Configuration
@EnableZuulProxy
@EnableResourceServer
@EnableConfigurationProperties({ApiGatewayProperties.class})
public class ApiGatewayConfiguration extends WebSecurityConfigurerAdapter {

    private static final String OKTA_TOKEN_PROVIDER = "okta";
    private final ApiGatewayProperties apiGatewayProperties;

    public ApiGatewayConfiguration(ApiGatewayProperties apiGatewayProperties) {
        this.apiGatewayProperties = apiGatewayProperties;
    }

    @Bean
    public ResourceServerConfigurer resourceServerConfigurer(ResourceServerTokenServices tokenServices) {
        return new ResourceServerConfigurer() {
            @Override
            public void configure(final ResourceServerSecurityConfigurer config) {
                config.tokenServices(tokenServices);
            }

            @Override
            public void configure(final HttpSecurity http) throws Exception {
                http
                    .authorizeRequests()
                        .antMatchers("/manage/health**", "/manage/info")
                            .permitAll();
                http
                    .authorizeRequests()
                        .antMatchers("/api/**")
                            .authenticated();
                http
                    .exceptionHandling()
                        .accessDeniedHandler(new OAuth2AccessDeniedHandler());
            }
        };
    }

    @Bean
    public ResourceServerTokenServices tokenServices() {
        // Temporarily support both OpenAM and Okta based on configuration.
        return OKTA_TOKEN_PROVIDER.equalsIgnoreCase(apiGatewayProperties.getTokenProvider()) ?
                oktaTokenServices() :
                openAmTokenServices();
    }

    private OpenAmTokenServices openAmTokenServices() {
        RestTemplate restTemplate = new RestTemplate();
        restTemplate.setErrorHandler(new DefaultResponseErrorHandler() {
            @Override
            // Ignore 400, that is what is returned if the token is invalid
            // Better to pass back the json body to make the error message available
            public void handleError(ClientHttpResponse response) throws IOException {
                if (response.getRawStatusCode() != 400) {
                    super.handleError(response);
                }
            }
        });

        DefaultAccessTokenConverter tokenConverter = new DefaultAccessTokenConverter();
        tokenConverter.setIncludeGrantType(true);

        return new OpenAmTokenServices(this.apiGatewayProperties, tokenConverter, restTemplate);
    }

    private OktaTokenServices oktaTokenServices() {
        final AccessTokenVerifier verifier = oktaJwtVerifier();
        DefaultAccessTokenConverter tokenConverter = new DefaultAccessTokenConverter();
        tokenConverter.setIncludeGrantType(true);

        return new OktaTokenServices(tokenConverter, verifier);
    }

    private AccessTokenVerifier oktaJwtVerifier() {
        return JwtVerifiers.accessTokenVerifierBuilder()
                .setIssuer(apiGatewayProperties.getCheckTokenEndpointUrl())
                .setAudience(apiGatewayProperties.getAudience())
                .setConnectionTimeout(Duration.ofMillis(apiGatewayProperties.getConnectionTimeout()))
                .setReadTimeout(Duration.ofMillis(apiGatewayProperties.getConnectionTimeout()))
                .build();
    }}