package org.opentestsystem.ap.apigateway;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.oauth2.provider.token.AccessTokenConverter;
import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
import org.springframework.security.oauth2.provider.token.UserAuthenticationConverter;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestOperations;

import java.util.Map;

/**
 * Class to provide validation of OAuth2 tokens using an OpenAM Authorization server
 * Based on {@link org.springframework.security.oauth2.provider.token.RemoteTokenServices}
 * but modified to communicate with an OpenAM server
 */
@Slf4j
public class OpenAmTokenServices implements ResourceServerTokenServices {

    private final RestOperations restOperations;
    private final AccessTokenConverter tokenConverter;
    private final ApiGatewayProperties properties;

    public OpenAmTokenServices(final ApiGatewayProperties properties,
                               final AccessTokenConverter defaultAccessTokenConverter,
                               final RestOperations restOperations) {
        this.properties = properties;
        this.tokenConverter = defaultAccessTokenConverter;
        this.restOperations = restOperations;
    }

    @Override
    public OAuth2Authentication loadAuthentication(String accessToken) throws AuthenticationException, InvalidTokenException {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + accessToken);

        Map map = restOperations.exchange(properties.getCheckTokenEndpointUrl(), HttpMethod.GET,
                new HttpEntity<MultiValueMap<String, String>>(null, headers), Map.class).getBody();

        if (map.containsKey("error")) {
            throw new InvalidTokenException(accessToken);
        }

        // user_name is needed downstream by the OAuth process, if there is a user_name value
        // then the authentication manager is called to authenticate the request and that is when
        // we look up the user's permission
        if (map.containsKey("mail")) {
            map.put(UserAuthenticationConverter.USERNAME, map.get("mail"));
        }

        @SuppressWarnings("unchecked")
        OAuth2Authentication result = tokenConverter.extractAuthentication(map);
        log.debug("Result {} grant type {} scope {}", result, result.getOAuth2Request().getGrantType(), result.getOAuth2Request().getScope());
        return result;
    }

    @Override
    public OAuth2AccessToken readAccessToken(String accessToken) {
        throw new UnsupportedOperationException("Not supported: read access token");
    }
}
