/*
 * Copyright 2017 Regents of the University of California.
 *
 * Licensed under the Educational Community License, Version 2.0 (the "license");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the license at
 *
 * https://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.opentestsystem.ap.apigateway.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Configuration;
import org.springframework.session.data.redis.config.ConfigureRedisAction;
import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;
import org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration;

import javax.annotation.PostConstruct;

@Configuration
@ConditionalOnProperty(value = "spring.session.enabled", havingValue = "true", matchIfMissing = true)
@EnableRedisHttpSession
public class RedisSessionConfig extends RedisHttpSessionConfiguration {

    @Value("${server.session.timeout:900}")
    private Integer maxInactiveIntervalInMinutes;

    @PostConstruct
    private void postConstruct() {
        this.setMaxInactiveIntervalInSeconds(maxInactiveIntervalInMinutes);
        this.setConfigureRedisAction(ConfigureRedisAction.NO_OP);
    }

//    @Bean
//    public RedisTemplate<Object, Object> sessionRedisTemplate(RedisConnectionFactory connectionFactory) {
//        RedisTemplate<Object, Object> template = super.sessionRedisTemplate(connectionFactory);
//        template.setValueSerializer(redisSerializer());
//        return template;
//    }
//
//    @Bean
//    public RedisOperationsSessionRepository sessionRepository(
//        @Qualifier("sessionRedisTemplate") RedisOperations<Object, Object> sessionRedisTemplate,
//        ApplicationEventPublisher applicationEventPublisher) {
//        RedisOperationsSessionRepository repository = super.sessionRepository(
//            sessionRedisTemplate, applicationEventPublisher);
//        repository.setDefaultSerializer(redisSerializer());
//        return repository;
//    }
//
//    private RedisSerializer<Object> redisSerializer() {
//        ObjectMapper mapper = new ObjectMapper();
//        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
//        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
//
//        Jackson2JsonRedisSerializer<Object> serializer = new Jackson2JsonRedisSerializer<>(Object.class);
//        serializer.setObjectMapper(mapper);
//
//        return serializer;
//    }
}
